---
layout: post
title:  "东京大学 编程题 201402"
date:   2015-01-02
category: blog
---
###试题
JP:http://www.i.u-tokyo.ac.jp/edu/course/ci/pdf/2014-2-program.pdf
EN:http://www.i.u-tokyo.ac.jp/edu/course/ci/pdf/2014-2-program-en.pdf

###代码
https://github.com/songsongdahu/tokyo_2014_02

###思考
(1)<br>
<code>public int func1(int x)</code><br>
很简单，没有什么要说明的。<br>
(2)<br>
<code>public long func2(int x)</code><br>
问题同(1)，但是如果使用递归的话计算时间就超出10秒，因此把每一步的结果保存起来减少计算量。<br>
同时根据题目的提示，使用int类型会超出范围，因此使用long型。<br>
(3)<br>
<code>public String str_plus64(String str_a, String str_b)</code><br>
<code>//实现了两个64位以内的正整数的加法（结果不可超过64位）</code><br>
比较容易想到的方法是，拆开来算最后把结果整合起来。这里直接实现了64位的，因为32位的如果考虑到进位的话可能会有不够的情况。<br>
唯一需要注意的是先算低位的加法，然后再算高位的加法。<br>
(4)<br>
<code>public String func4(int x)</code><br>
同(2)，但是到140的话long型的长度就不够用了，把加法改成(3)中实现的方法即可。<br>
(5)<br>
要求实现浮点数的乘法<br>
开始对"浮動小数点数"的理解有偏差，"1 00"这样的数是不存在的，应该写成"10000000000000000000000000000000 00"(32位必须)。导致后面的思考方向错误，改起来非常麻烦。<br>
<code>public String str_mult32(String str_a, String str_b)//32位整数乘法</code><br>
这里想到的是先把底数乘起来，然后再根据乘出来的结果算出底数。于是先实现了32位整数的乘法，这里的实现方法是把被乘数乘以乘数的第一位（也就是做多次加法），然后移位，继续乘下一位直到最后。<br>
<code>public String str_mult32f(String a1, int a2, String b1, int b2)//32位浮点数乘法</code><br>
然后是浮点数的乘法，首先考虑底数乘法的积和要求的积的倍数差别。这里把两个在1-10之间的底数放大了10^31 倍，并且没有考虑阶数，因此首先应当加上阶数并缩小10^62 倍。
<pre><code>int product2 = a2 + b2 - 62;</code></pre>
<br>然后考虑乘出来的结果，取前32位，然后多余的位数砍掉加到结果的阶数里（相当于右移操作）。
<pre><code>
if(product1.length()>=32){
	product2 += product1.length() - 1;
	product1 = product1.substring(0, 32);
}
</code></pre>
(6)<br>
要求计算(1+sqrt(5))/2，除以2可以看成乘以0.5，使用刚才已经实现的乘法来完成。于是一个比较好的方法是先计算sqrt(5)，并且实现sqrt(5)+1，也就是浮点数之间的加法。<br>
可惜做的时候是直接解了(2x-1)^2 =5的方程，需要实现了浮点数的减法。计算量区别不大（区区几倍的差距...）但是想起来更麻烦了。不过浮点数的减法后面要用所以（ry<br>
<pre><code>public String str_sub64(String str_a, String str_b)//整数的减法
public String str_sub32f(String a1, int a2, String b1, int b2)//浮点数的减法
public String func6()
</code></pre>
至于计算sqrt(5)方面，想到了二分法但是不太好停止?感觉比较方便写的是直接枚举出来（大概要实现32*10级别的浮点数乘法），这里由于只要求算sqrt(5)所以偷了很多懒，例如第一位肯定是2，这个浮点数的阶数也肯定是0就没算。<br>
总之算出来的结果是:<br>
sqrt5:22360679774997896964091736687312 00
(1+sqrt(5))/2:16180339887498948482045868343656 00
<br>
(7)<br>
第7问终于又比较简单了，把第六问算出的结果保存起来，然后循环一下乘起来就好了。这里/sqrt(5)看成*sqrt(5)*0.2来计算。<br>
<code>public String func7(int x ,String sqrt5, String t)</code><br>
(8)<br>
这一问主要实现浮点数的减法，并且进行大小比较。减法之前实现了于是这一问比较轻松。<br>
<code>public int comp_float(String x1, int x2, String y1, int y2)</code><br>
<code>public int func8()</code>
但是计算量太大了，这一问至少算了两分钟，暂时还没有去考虑减少计算量的方法（估计改善一下乘法比较好，再说吧）

###总结
<li>保证浮点数的底数为32位并且首位不为0<br>
浮点数方面，进行的计算有加法（这次没实现），减法，乘法。<br>
减法的时候，是将阶数比较低的数右移来对齐的。因此减出来的数应该不会大于32位（虽然整数实现的减法是64位，但是这里只保留了32位的精度）。如果小于32位，那要左移对齐。由于减法的时候把首位的0都去掉了，所以直接移动到长度为32的时候即可。<br>
乘法的时候肯定是大于32位的，于是右移对齐到32位即可。这样保证了每次操作完的浮点数的底数为32位并且首位不为0。<br>
<li>先读完所有题再去想怎么实现<br>
由于题目是相关的，所以应该保证本体实现的方法能被用到。<br>
<li>写程序花时间太多了<br>
没救，总之先不考虑其他语言了。<br>
<li>之后还能用到的东西<br>
至少64位整数的加减法和32位整数的乘法，以及32位精度的浮点数的加减乘法，有空提取出来。话说除法的实现……

###吐槽
<li>微软雅黑的日语的汉字太难看了orz<br>
<li>两个半小时的程序写了半天，看来没什么希望啊(笑)<br>
<li>新年快乐！あけおめ！Happy new year！